#Conociendo Docker

#obteniendo imagenes existentes el comando apoya a descargarla 
	docker pull mysql  

#obteniendo las imagenes descargadas 
	docker images

#Creando una red de comunicacion a la BD y aplicaciones
	docker network create red-spring-boot

#Creando volumen para BD
#	-- limpiando volumenes  docker volume prune
	docker volume create mysql-mb-data

corriendo una instancia de la imagen
#	docker run
#		-d --> ejecucion en segundo plano
#		-p  A:B --> A-> puerto de salida exterior B - puerto interno
#		--name --> un nombre al contenedor
#		-e MYSQL_ROOT_PASSWORD --> ? parece ser un parametropropio de la iamgen ,, averiguando
#		--network  comunicacion entre contenedores
#		-v volume creado anteriormente para persistir la informacion
	
	 docker run --name mysql_mb_data  -d  -p 3306:3306  --network red-spring-boot -v mysql-mb-data -e MYSQL_ROOT_PASSWORD=123456789A   mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci 

#Ejecutamos el script de creacion de BD  para la generacion de tablas  1 catalogo, y 2 usuarios
#	/bd/generacionBD.sql 
#	usuarios
#	 userapp
#	 12345678A	 
#	 userconsulta
#	 12345678A
	 
#APLICACION DATA para persistir informacion 
#Creando imagen para aplicativo data(quien actualiza la informaciona   BD) , se ejecuta dentro del codigo en donde existe el archivo Docker file
	docker build -t spring-boot-data-mb .
	
#Corriendo la imagen creada del aplicativo anteriormente
	docker run --network red-spring-boot  --name spring_boot_data_mb -p 8081:8081 spring-boot-data-mb:latest
	
#APLICACION API para consultar informcion
#Creando imagen para aplicativo api(quien consultara la informaciona   BD) , se ejecuta dentro del codigo en donde existe el archivo Docker file
	docker build -t spring-boot-api-mb .
	
#Corriendo la imagen creada del aplicativo anteriormente
	docker run --network red-spring-boot  --name spring_boot_api_mb -p 8081:8081 spring-boot-api-mb:latest
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Creando una red de comunicacion a la BD y aplicaciones
docker network create red-spring-boot
	
	
Conociendo Python
	import shapefile

	shape = shapefile.Reader('C:\\Users\\nodez\\Downloads\\prueba_fetchdata_metrobus\\prueba_fetchdata_metrobus\\prueba_fetchdata_metrobus.shp')
	
	feature = shape.shapeRecords()[0]
	
	first = feature.shape.__geo_interface__
	
	print(first)
	
	
	shape2 = shapefile.Reader('C:\\Users\\nodez\\Downloads\\prueba_fetchdata_metrobus\\prueba_fetchdata_metrobus\\prueba_fetchdata_metrobus.shx')
	
	feature2 = shape2.shapeRecords()[0]
	
	first2 = feature2.shape.__geo_interface__
	
	print(first2)
	
	
import urllib
url = 'https://datos.cdmx.gob.mx/api/3/action/datastore_search?resource_id=61fd8d85-9598-4dfe-890b-2780ed26efc8&limit=1000'  
fileobj = urllib.urlopen(url)
print fileobj.read()



http://localhost:8080/api/alcaldias
http://localhost:8080/api/unidades/170
http://localhost:8080/api/unidades/

http://localhost:8080/api/unidades/alcaldia/2

test lectura api cdmx
http://localhost:8081/data/consultaAlcaldias
http://localhost:8081/data/consultaUnidades
http://localhost:8081/data/altaAlcaldias
http://localhost:8081/data/altaUnidades

http://localhost:8001/data/consultaAlcaldias
http://localhost:8001/data/consultaUnidades
http://localhost:8001/data/altaAlcaldias
http://localhost:8001/data/altaUnidades




Unidades CDMX
https://datos.cdmx.gob.mx/api/3/action/datastore_search?resource_id=ad360a0e-b42f-482c-af12-1fd72140032e

Alcaldias CDMX
https://datos.cdmx.gob.mx/api/3/action/datastore_search?resource_id=e4a9b05f-c480-45fb-a62c-6d4e39c5180e